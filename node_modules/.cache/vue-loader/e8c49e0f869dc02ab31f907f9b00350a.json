{"remainingRequest":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sthembisomashiyane/WebstormProjects/dripy/src/components/settings/Address.vue?vue&type=template&id=4911f9f8&scoped=true&","dependencies":[{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/src/components/settings/Address.vue","mtime":1587899242305},{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/cache-loader/dist/cjs.js","mtime":1587899238127},{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1587899242029},{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/cache-loader/dist/cjs.js","mtime":1587899238127},{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/vue-loader/lib/index.js","mtime":1587899242029}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}