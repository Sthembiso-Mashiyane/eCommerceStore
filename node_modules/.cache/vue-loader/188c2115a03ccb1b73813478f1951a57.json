{"remainingRequest":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sthembisomashiyane/WebstormProjects/dripy/src/components/auth/Register.vue?vue&type=template&id=4523026a&","dependencies":[{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/src/components/auth/Register.vue","mtime":1587899242304},{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/cache-loader/dist/cjs.js","mtime":1587899238127},{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1587899242029},{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/cache-loader/dist/cjs.js","mtime":1587899238127},{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/vue-loader/lib/index.js","mtime":1587899242029}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}