{"remainingRequest":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/babel-loader/lib/index.js!/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/eslint-loader/index.js??ref--13-0!/Users/sthembisomashiyane/WebstormProjects/dripy/src/stores/modules/address.js","dependencies":[{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/src/stores/modules/address.js","mtime":1587899242306},{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/cache-loader/dist/cjs.js","mtime":1587899238127},{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/babel-loader/lib/index.js","mtime":1587899237742},{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/eslint-loader/index.js","mtime":1587899238895}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvVXNlcnMvc3RoZW1iaXNvbWFzaGl5YW5lL1dlYnN0b3JtUHJvamVjdHMvZHJpcHkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlIjsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmltcG9ydCB7IGRiIH0gZnJvbSAiLi4vLi4vY29uZmlnL2ZpcmViYXNlQ29uZmlnIjsKdmFyIHN0YXRlID0gewogIGlzQWRkcmVzc2VzTG9hZGluZzogdHJ1ZSwKICBhZGRyZXNzZXM6IFtdCn07CnZhciBtdXRhdGlvbnMgPSB7CiAgJ1NFVF9VU0VSX0FERFJFU1NFUyc6IGZ1bmN0aW9uIFNFVF9VU0VSX0FERFJFU1NFUyhzdGF0ZSwgYWRkcmVzc2VzKSB7CiAgICBzdGF0ZS5hZGRyZXNzZXMgPSBhZGRyZXNzZXM7CiAgICBzdGF0ZS5pc0FkZHJlc3Nlc0xvYWRpbmcgPSBmYWxzZTsKICB9LAogICdTRVRfVVNFUl9TRUxFQ1RFRF9VU0VSX0FERFJFU1MnOiBmdW5jdGlvbiBTRVRfVVNFUl9TRUxFQ1RFRF9VU0VSX0FERFJFU1Moc3RhdGUsIHByb2R1Y3RMaXN0KSB7CiAgICBzdGF0ZS51c2VyQWRkcmVzcyA9IHByb2R1Y3RMaXN0OwogICAgc3RhdGUuaXNBZGRyZXNzTG9hZGluZyA9IGZhbHNlOwogIH0KfTsKdmFyIGFjdGlvbnMgPSB7CiAgZ2V0QWRkcmVzc2VzOiBmdW5jdGlvbiBnZXRBZGRyZXNzZXMoX3JlZiwgdWlkKSB7CiAgICB2YXIgY29tbWl0ID0gX3JlZi5jb21taXQ7CiAgICBzdGF0ZS5pc0FkZHJlc3Nlc0xvYWRpbmcgPSB0cnVlOwogICAgcmV0dXJuIGRiLmNvbGxlY3Rpb24oInVzZXJzIikuZG9jKHVpZCkuY29sbGVjdGlvbignYWRkcmVzc2VzJykub25TbmFwc2hvdChmdW5jdGlvbiAoYWRkcmVzc2VzKSB7CiAgICAgIHZhciB0b1NlbmQgPSBbXTsKICAgICAgYWRkcmVzc2VzLmZvckVhY2goZnVuY3Rpb24gKGRvYykgewogICAgICAgIHZhciB0b0FkZCA9IF9vYmplY3RTcHJlYWQoewogICAgICAgICAgaWQ6IGRvYy5pZAogICAgICAgIH0sIGRvYy5kYXRhKCkpOwoKICAgICAgICB0b1NlbmQucHVzaCh0b0FkZCk7CiAgICAgIH0pOwogICAgICBjb25zb2xlLmxvZyh0b1NlbmQpOwogICAgICBjb21taXQoJ1NFVF9VU0VSX0FERFJFU1NFUycsIHRvU2VuZCk7CiAgICB9KTsKICB9LAogIGdldEFkZHJlc3NCeUFkZHJlc3NJRDogZnVuY3Rpb24gZ2V0QWRkcmVzc0J5QWRkcmVzc0lEKF9yZWYyLCBfcmVmMykgewogICAgdmFyIGNvbW1pdCA9IF9yZWYyLmNvbW1pdDsKICAgIHZhciB1aWQgPSBfcmVmMy51aWQsCiAgICAgICAgYWRkcmVzc0lEID0gX3JlZjMuYWRkcmVzc0lEOwogICAgc3RhdGUudXNlckxvYWRpbmcgPSB0cnVlOwogICAgcmV0dXJuIGRiLmNvbGxlY3Rpb24oInVzZXJzIikuZG9jKHVpZCkuY29sbGVjdGlvbignYWRkcmVzc2VzJykuZG9jKGFkZHJlc3NJRCkub25TbmFwc2hvdChmdW5jdGlvbiAodXNlcikgewogICAgICB2YXIgdG9TZW5kID0gdXNlci5kYXRhKCk7CiAgICAgIGNvbnNvbGUubG9nKHRvU2VuZCk7CiAgICAgIGNvbW1pdCgnU0VUX1VTRVJfU0VMRUNURURfVVNFUl9BRERSRVNTJywgdG9TZW5kKTsKICAgIH0pOwogIH0sCiAgZWRpdEFkZHJlc3NCeUFkZHJlc3NJRDogZnVuY3Rpb24gZWRpdEFkZHJlc3NCeUFkZHJlc3NJRChfcmVmNCwgX3JlZjUpIHsKICAgIHZhciBjb21taXQgPSBfcmVmNC5jb21taXQ7CiAgICB2YXIgdWlkID0gX3JlZjUudWlkLAogICAgICAgIGFkZHJlc3MgPSBfcmVmNS5hZGRyZXNzOwogICAgY29uc29sZS5sb2coY29tbWl0KTsKICAgIHJldHVybiBkYi5jb2xsZWN0aW9uKCJ1c2VycyIpLmRvYyh1aWQpLmNvbGxlY3Rpb24oJ2FkZHJlc3NlcycpLmRvYyhhZGRyZXNzLmlkKS51cGRhdGUoewogICAgICBzdHJlZXRBZGRyZXNzOiBhZGRyZXNzLnN0cmVldEFkZHJlc3MsCiAgICAgIHN1YnVyYjogYWRkcmVzcy5zdWJ1cmIsCiAgICAgIGNpdHk6IGFkZHJlc3MuY2l0eSwKICAgICAgcHJvdmluY2U6IGFkZHJlc3MucHJvdmluY2UsCiAgICAgIHBvc3RhbENvZGU6IGFkZHJlc3MucG9zdGFsQ29kZQogICAgfSk7CiAgfSwKICBzYXZlQWRkcmVzczogZnVuY3Rpb24gc2F2ZUFkZHJlc3MoX3JlZjYsIF9yZWY3KSB7CiAgICB2YXIgY29tbWl0ID0gX3JlZjYuY29tbWl0OwogICAgdmFyIHVpZCA9IF9yZWY3LnVpZCwKICAgICAgICBhZGRyZXNzT2JqZWN0ID0gX3JlZjcuYWRkcmVzc09iamVjdDsKICAgIGNvbnNvbGUubG9nKGNvbW1pdCk7CiAgICBjb25zb2xlLmxvZyh1aWQpOwogICAgY29uc29sZS5sb2coYWRkcmVzc09iamVjdCk7CiAgICByZXR1cm4gZGIuY29sbGVjdGlvbigidXNlcnMiKS5kb2ModWlkKS5jb2xsZWN0aW9uKCJhZGRyZXNzZXMiKS5hZGQoewogICAgICBzdHJlZXRBZGRyZXNzOiBhZGRyZXNzT2JqZWN0LnN0cmVldEFkZHJlc3MsCiAgICAgIHN1YnVyYjogYWRkcmVzc09iamVjdC5zdWJ1cmIsCiAgICAgIGNpdHk6IGFkZHJlc3NPYmplY3QuY2l0eSwKICAgICAgcHJvdmluY2U6IGFkZHJlc3NPYmplY3QucHJvdmluY2UsCiAgICAgIHBvc3RhbENvZGU6IGFkZHJlc3NPYmplY3QucG9zdGFsQ29kZQogICAgfSk7CiAgfSwKICBkZWxldGVBZGRyZXNzOiBmdW5jdGlvbiBkZWxldGVBZGRyZXNzKF9yZWY4LCBfcmVmOSkgewogICAgdmFyIGNvbW1pdCA9IF9yZWY4LmNvbW1pdDsKICAgIHZhciB1aWQgPSBfcmVmOS51aWQsCiAgICAgICAgYWRkcmVzcyA9IF9yZWY5LmFkZHJlc3M7CiAgICBkYi5jb2xsZWN0aW9uKCJ1c2VycyIpLmRvYyh1aWQpLmNvbGxlY3Rpb24oImFkZHJlc3NlcyIpLmRvYyhhZGRyZXNzLmlkKS5kZWxldGUoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgY29uc29sZS5sb2coY29tbWl0KTsKICAgICAgY29uc29sZS5sb2coIkRvY3VtZW50IHN1Y2Nlc3NmdWxseSBkZWxldGVkISIpOwogICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgIHRocm93IGVycm9yOwogICAgfSk7CiAgfQp9Owp2YXIgZ2V0dGVycyA9IHsKICBhZGRyZXNzZXM6IGZ1bmN0aW9uIGFkZHJlc3NlcyhzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLmFkZHJlc3NlczsKICB9LAogIGlzQWRkcmVzc2VzTG9hZGluZzogZnVuY3Rpb24gaXNBZGRyZXNzZXNMb2FkaW5nKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUuaXNBZGRyZXNzZXNMb2FkaW5nOwogIH0KfTsKZXhwb3J0IGRlZmF1bHQgewogIHN0YXRlOiBzdGF0ZSwKICBtdXRhdGlvbnM6IG11dGF0aW9ucywKICBhY3Rpb25zOiBhY3Rpb25zLAogIGdldHRlcnM6IGdldHRlcnMKfTs="},{"version":3,"sources":["/Users/sthembisomashiyane/WebstormProjects/dripy/src/stores/modules/address.js"],"names":["db","state","isAddressesLoading","addresses","mutations","productList","userAddress","isAddressLoading","actions","getAddresses","uid","commit","collection","doc","onSnapshot","toSend","forEach","toAdd","id","data","push","console","log","getAddressByAddressID","addressID","userLoading","user","editAddressByAddressID","address","update","streetAddress","suburb","city","province","postalCode","saveAddress","addressObject","add","deleteAddress","delete","then","catch","error","getters"],"mappings":"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","sourcesContent":["import {db} from \"../../config/firebaseConfig\";\n\nconst state = {\n    isAddressesLoading: true,\n    addresses: []\n}\n\nconst mutations = {\n    'SET_USER_ADDRESSES'(state, addresses) {\n        state.addresses = addresses;\n        state.isAddressesLoading = false;\n    },\n    'SET_USER_SELECTED_USER_ADDRESS'(state, productList) {\n        state.userAddress = productList;\n        state.isAddressLoading = false;\n    }\n\n}\n\nconst actions = {\n    getAddresses({commit}, uid) {\n        state.isAddressesLoading = true\n        return db.collection(\"users\").doc(uid).collection('addresses').onSnapshot(addresses => {\n            const toSend = []\n            addresses.forEach(function(doc) {\n                const toAdd = {\n                    id: doc.id,\n                    ...doc.data()\n                }\n                toSend.push(toAdd);\n            });\n            console.log(toSend);\n            commit('SET_USER_ADDRESSES', toSend);\n        })\n    },\n    getAddressByAddressID({commit}, {uid, addressID}) {\n        state.userLoading = true\n        return db.collection(\"users\").doc(uid).collection('addresses').doc(addressID).onSnapshot(user => {\n            const toSend = user.data();\n            console.log(toSend);\n            commit('SET_USER_SELECTED_USER_ADDRESS', toSend);\n        })\n    },\n    editAddressByAddressID({commit}, {uid, address}) {\n        console.log(commit)\n        return db.collection(\"users\").doc(uid).collection('addresses').doc(address.id).update({\n            streetAddress: address.streetAddress,\n            suburb: address.suburb,\n            city: address.city,\n            province: address.province,\n            postalCode: address.postalCode\n        })\n    },\n    saveAddress({commit}, {uid, addressObject}) {\n        console.log(commit);\n        console.log(uid);\n        console.log(addressObject);\n\n        return db.collection(\"users\").doc(uid).collection(\"addresses\").add({\n            streetAddress: addressObject.streetAddress,\n            suburb: addressObject.suburb,\n            city: addressObject.city,\n            province: addressObject.province,\n            postalCode: addressObject.postalCode,\n\n        })\n    },\n    deleteAddress({commit},{uid, address}) {\n        db.collection(\"users\").doc(uid).collection(\"addresses\").doc(address.id).delete().then(function() {\n            console.log(commit);\n            console.log(\"Document successfully deleted!\");\n        }).catch(function(error) {\n            throw error\n        });\n    }\n}\n\nconst getters = {\n    addresses: (state) => {\n        return state.addresses;\n    },\n    isAddressesLoading: (state) => {\n        return state.isAddressesLoading;\n    }\n}\n\nexport default {\n    state,\n    mutations,\n    actions,\n    getters\n}\n"]}]}