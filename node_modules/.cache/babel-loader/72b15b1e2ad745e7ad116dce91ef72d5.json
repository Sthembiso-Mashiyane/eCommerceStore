{"remainingRequest":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/babel-loader/lib/index.js!/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/eslint-loader/index.js??ref--13-0!/Users/sthembisomashiyane/WebstormProjects/dripy/src/stores/modules/brand.js","dependencies":[{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/src/stores/modules/brand.js","mtime":1587976273261},{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/cache-loader/dist/cjs.js","mtime":1587899238127},{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/babel-loader/lib/index.js","mtime":1587899237742},{"path":"/Users/sthembisomashiyane/WebstormProjects/dripy/node_modules/eslint-loader/index.js","mtime":1587899238895}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvVXNlcnMvc3RoZW1iaXNvbWFzaGl5YW5lL1dlYnN0b3JtUHJvamVjdHMvZHJpcHkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlIjsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmltcG9ydCB7IGRiIH0gZnJvbSAiLi4vLi4vY29uZmlnL2ZpcmViYXNlQ29uZmlnIjsKdmFyIHN0YXRlID0gewogIGlzQnJhbmRMb2FkaW5nOiBmYWxzZQp9Owp2YXIgbXV0YXRpb25zID0gewogICdTRVRfQlJBTkQnOiBmdW5jdGlvbiBTRVRfQlJBTkQoc3RhdGUsIGFkZHJlc3NlcykgewogICAgc3RhdGUuYWRkcmVzc2VzID0gYWRkcmVzc2VzOwogICAgc3RhdGUuaXNCcmFuZExvYWRpbmcgPSBmYWxzZTsKICB9Cn07CnZhciBhY3Rpb25zID0gewogIGdldEJyYW5kRG9jUmVmZXJlbmNlQmVmb3JlU2F2ZTogZnVuY3Rpb24gZ2V0QnJhbmREb2NSZWZlcmVuY2VCZWZvcmVTYXZlKCkgewogICAgcmV0dXJuIGRiLmNvbGxlY3Rpb24oImJyYW5kcyIpLmRvYygpOwogIH0sCiAgZ2V0QnJhbmQ6IGZ1bmN0aW9uIGdldEJyYW5kKF9yZWYsIHVpZCkgewogICAgdmFyIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgc3RhdGUuaXNBZGRyZXNzZXNMb2FkaW5nID0gdHJ1ZTsKICAgIHJldHVybiBkYi5jb2xsZWN0aW9uKCJicmFuZHMiKS5kb2ModWlkKS5jb2xsZWN0aW9uKCdhZGRyZXNzZXMnKS5vblNuYXBzaG90KGZ1bmN0aW9uIChhZGRyZXNzZXMpIHsKICAgICAgdmFyIHRvU2VuZCA9IFtdOwogICAgICBhZGRyZXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoZG9jKSB7CiAgICAgICAgdmFyIHRvQWRkID0gX29iamVjdFNwcmVhZCh7CiAgICAgICAgICBpZDogZG9jLmlkCiAgICAgICAgfSwgZG9jLmRhdGEoKSk7CgogICAgICAgIHRvU2VuZC5wdXNoKHRvQWRkKTsKICAgICAgfSk7CiAgICAgIGNvbW1pdCgnU0VUX1VTRVJfQUREUkVTU0VTJywgdG9TZW5kKTsKICAgIH0pOwogIH0sCiAgc2F2ZUJyYW5kOiBmdW5jdGlvbiBzYXZlQnJhbmQoX3JlZjIsIGJyYW5kT2JqZWN0KSB7CiAgICB2YXIgY29tbWl0ID0gX3JlZjIuY29tbWl0OwogICAgZGIuY29sbGVjdGlvbigiYnJhbmRzIikuZG9jKGJyYW5kT2JqZWN0LmRvY0lEKS5zZXQoewogICAgICBicmFuZElEOiBicmFuZE9iamVjdC5kb2NJRCwKICAgICAgYnJhbmROYW1lOiBicmFuZE9iamVjdC5icmFuZE5hbWUsCiAgICAgIGJyYW5kVGVsTnVtYmVyOiBicmFuZE9iamVjdC5icmFuZFRlbE51bWJlciwKICAgICAgYnJhbmRFbWFpbDogYnJhbmRPYmplY3QuYnJhbmRFbWFpbCwKICAgICAgYnJhbmREZXNjcmlwdGlvbjogYnJhbmRPYmplY3QuYnJhbmREZXNjcmlwdGlvbiwKICAgICAgbG9nb1VSTDogYnJhbmRPYmplY3QubG9nb1VSTCwKICAgICAgb3duZXJJRDogYnJhbmRPYmplY3Qub3duZXJJRCwKICAgICAgdmVyaWZpZWQ6IGJyYW5kT2JqZWN0LnZlcmlmaWVkCiAgICB9KTsKICAgIGNvbW1pdCgnJyk7CiAgfQp9Owp2YXIgZ2V0dGVycyA9IHt9OwpleHBvcnQgZGVmYXVsdCB7CiAgc3RhdGU6IHN0YXRlLAogIG11dGF0aW9uczogbXV0YXRpb25zLAogIGFjdGlvbnM6IGFjdGlvbnMsCiAgZ2V0dGVyczogZ2V0dGVycwp9Ow=="},{"version":3,"sources":["/Users/sthembisomashiyane/WebstormProjects/dripy/src/stores/modules/brand.js"],"names":["db","state","isBrandLoading","mutations","addresses","actions","getBrandDocReferenceBeforeSave","collection","doc","getBrand","uid","commit","isAddressesLoading","onSnapshot","toSend","forEach","toAdd","id","data","push","saveBrand","brandObject","docID","set","brandID","brandName","brandTelNumber","brandEmail","brandDescription","logoURL","ownerID","verified","getters"],"mappings":";;;;;;;;;AAAA,SAAQA,EAAR;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,cAAc,EAAE;AADN,CAAd;AAIA,IAAMC,SAAS,GAAG;AACd,aADc,qBACFF,KADE,EACKG,SADL,EACgB;AAC1BH,IAAAA,KAAK,CAACG,SAAN,GAAkBA,SAAlB;AACAH,IAAAA,KAAK,CAACC,cAAN,GAAuB,KAAvB;AACH;AAJa,CAAlB;AAOA,IAAMG,OAAO,GAAG;AACZC,EAAAA,8BADY,4CACqB;AAC7B,WAAON,EAAE,CAACO,UAAH,CAAc,QAAd,EAAwBC,GAAxB,EAAP;AACH,GAHW;AAIZC,EAAAA,QAJY,0BAIOC,GAJP,EAIY;AAAA,QAAdC,MAAc,QAAdA,MAAc;AACpBV,IAAAA,KAAK,CAACW,kBAAN,GAA2B,IAA3B;AACA,WAAOZ,EAAE,CAACO,UAAH,CAAc,QAAd,EAAwBC,GAAxB,CAA4BE,GAA5B,EAAiCH,UAAjC,CAA4C,WAA5C,EAAyDM,UAAzD,CAAoE,UAAAT,SAAS,EAAI;AACpF,UAAMU,MAAM,GAAG,EAAf;AACAV,MAAAA,SAAS,CAACW,OAAV,CAAkB,UAAUP,GAAV,EAAe;AAC7B,YAAMQ,KAAK;AACPC,UAAAA,EAAE,EAAET,GAAG,CAACS;AADD,WAEJT,GAAG,CAACU,IAAJ,EAFI,CAAX;;AAIAJ,QAAAA,MAAM,CAACK,IAAP,CAAYH,KAAZ;AACH,OAND;AAOAL,MAAAA,MAAM,CAAC,oBAAD,EAAuBG,MAAvB,CAAN;AACH,KAVM,CAAP;AAWH,GAjBW;AAkBZM,EAAAA,SAlBY,4BAkBQC,WAlBR,EAkBqB;AAAA,QAAtBV,MAAsB,SAAtBA,MAAsB;AAC7BX,IAAAA,EAAE,CAACO,UAAH,CAAc,QAAd,EAAwBC,GAAxB,CAA4Ba,WAAW,CAACC,KAAxC,EAA+CC,GAA/C,CAAmD;AAC/CC,MAAAA,OAAO,EAAEH,WAAW,CAACC,KAD0B;AAE/CG,MAAAA,SAAS,EAAEJ,WAAW,CAACI,SAFwB;AAG/CC,MAAAA,cAAc,EAAEL,WAAW,CAACK,cAHmB;AAI/CC,MAAAA,UAAU,EAAEN,WAAW,CAACM,UAJuB;AAK/CC,MAAAA,gBAAgB,EAAEP,WAAW,CAACO,gBALiB;AAM/CC,MAAAA,OAAO,EAAER,WAAW,CAACQ,OAN0B;AAO/CC,MAAAA,OAAO,EAAET,WAAW,CAACS,OAP0B;AAQ/CC,MAAAA,QAAQ,EAAEV,WAAW,CAACU;AARyB,KAAnD;AAUApB,IAAAA,MAAM,CAAC,EAAD,CAAN;AACH;AA9BW,CAAhB;AAiCA,IAAMqB,OAAO,GAAG,EAAhB;AAEA,eAAe;AACX/B,EAAAA,KAAK,EAALA,KADW;AAEXE,EAAAA,SAAS,EAATA,SAFW;AAGXE,EAAAA,OAAO,EAAPA,OAHW;AAIX2B,EAAAA,OAAO,EAAPA;AAJW,CAAf","sourcesContent":["import {db} from \"../../config/firebaseConfig\";\n\nconst state = {\n    isBrandLoading: false,\n}\n\nconst mutations = {\n    'SET_BRAND'(state, addresses) {\n        state.addresses = addresses;\n        state.isBrandLoading = false;\n    },\n}\n\nconst actions = {\n    getBrandDocReferenceBeforeSave() {\n        return db.collection(\"brands\").doc();\n    },\n    getBrand({commit}, uid) {\n        state.isAddressesLoading = true\n        return db.collection(\"brands\").doc(uid).collection('addresses').onSnapshot(addresses => {\n            const toSend = []\n            addresses.forEach(function (doc) {\n                const toAdd = {\n                    id: doc.id,\n                    ...doc.data()\n                }\n                toSend.push(toAdd);\n            });\n            commit('SET_USER_ADDRESSES', toSend);\n        })\n    },\n    saveBrand({commit}, brandObject) {\n        db.collection(\"brands\").doc(brandObject.docID).set({\n            brandID: brandObject.docID,\n            brandName: brandObject.brandName,\n            brandTelNumber: brandObject.brandTelNumber,\n            brandEmail: brandObject.brandEmail,\n            brandDescription: brandObject.brandDescription,\n            logoURL: brandObject.logoURL,\n            ownerID: brandObject.ownerID,\n            verified: brandObject.verified\n        })\n        commit('', );\n    }\n}\n\nconst getters = {}\n\nexport default {\n    state,\n    mutations,\n    actions,\n    getters\n}\n"]}]}